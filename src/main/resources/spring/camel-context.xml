<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/data/jpa
                        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                        http://camel.apache.org/schema/spring
                        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jpa:repositories base-package="org.jboss.xavier.integrations.jpa" />

    <!-- setup ActiveMQ Artemis connection factory -->
    <bean id="artemisConnectionFactory" class="org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory">
        <constructor-arg index="0" value="tcp://${amq.server}:${amq.port:61616}"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <!-- specify connection factory on JMS component -->
        <property name="connectionFactory" ref="artemisConnectionFactory"/>
    </bean>

    <bean id="restResponseHeaderRemover" class="org.apache.camel.impl.DefaultHeaderFilterStrategy">
        <property name="outFilterPattern" value=".*" />
    </bean>

    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

        <restConfiguration apiContextPath="/api-doc" apiContextRouteId="doc-api" component="servlet" bindingMode="json">
            <endpointProperty key="headerFilterStrategy" value="#restResponseHeaderRemover"/>
            <apiProperty key="api.title" value="Migration Analytics REST API"/>
            <apiProperty key="api.version" value="0.1"/>
            <apiProperty key="cors" value="true"/>
        </restConfiguration>

        <rest path="/report">
            <description>Report REST API</description>
            <get uri="/">
                <description>Get the list of all the reports</description>
                <param name="summary" type="query" defaultValue="true" required="false" description="Disable the output objects to have only the fields needed in the reports summary page setting the parameter 'summary=false'" />
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" />
                <route id="reports-get-all">
                    <log message="${headers} ${body}" />
                    <choice>
                        <when>
                            <simple>${header.summary} == 'false'</simple>
                            <bean ref="initialSavingsEstimationReportService" method="findReports()" />
                        </when>
                        <otherwise>
                            <bean ref="initialSavingsEstimationReportService" method="findReportSummary(${header.page}, ${header.size})" />
                        </otherwise>
                    </choice>
                </route>
            </get>
            <get uri="/{id}">
                <description>Get the details of a report</description>
                <route id="report-get-details">
                    <bean beanType="org.jboss.xavier.integrations.jpa.service.InitialSavingsEstimationReportService" method="findReportSummaryById(${header.id})" />
                </route>
            </get>
            <get uri="/{id}/initial-saving-estimation">
                <description>Get the Initial Cost Saving report</description>
                <route id="reports-get-details">
                    <bean beanType="org.jboss.xavier.integrations.jpa.service.InitialSavingsEstimationReportService" method="findReportDetails(${header.id})" />
                </route>
            </get>
        </rest>

        <rest path="/user">
            <description>User REST API</description>
            <get uri="/" outType="org.jboss.xavier.integrations.route.model.user.User">
                <description>Get session user info</description>
                <route id="get-user-info">
                    <bean ref="userService" method="findUser" />
                </route>
            </get>
        </rest>

        <route id="call-kie-extract-reports" trace="true">
            <from uri="jms:queue:inputDataModel" />
            <log message="Message received" />
            <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
            <to id="decisionserver" uri="direct:decisionserver"/>
            <bean id="route-extract-reports" method="extractReports" ref="decisionServerHelper"/>
            <log id="route-log-totalPrice" message="totalPrice = ${body.totalPrice}"/>
            <to uri="jpa:org.jboss.xavier.integrations.migrationanalytics.output.ReportDataModel" />
        </route>

        <route id="sample-uploadFormInputDataModel-generator" autoStartup="{{sig.autoStartup}}">
            <description>Example route that will regularly create an InputDataModel and send it to a JMS queue</description>
            <from id="route-timer" uri="timer:testRoute?period=10s" />
            <bean id="route-new-uploadFormInputDataModel" method="createSampleUploadFormInputDataModel" ref="decisionServerHelper" />
            <to id="route-to-new-jms" uri="jms:queue:uploadFormInputDataModel" />
            <log message="Message with sample UploadFormInputDataModel sent" />
        </route>

        <route id="route-ma">
            <from uri="jms:queue:uploadFormInputDataModel" />
            <log message="Message received" />
            <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
            <to uri="direct:decisionserver"/>
            <bean id="route-extract-ics-reports" method="extractInitialSavingsEstimationReportModel" ref="decisionServerHelper"/>
<!--            <log id="route-log-sourceLicenseValue" message="totalPrice = ${body.sourceCostsModel.sourceLicenseValue}"/>
            <to uri="jpa:org.jboss.xavier.analytics.pojo.output.InitialSavingsEstimationReportModel" />-->
            <log id="route-log-sourceLicenseValue" message="totalPrice = ${body.sourceCostsModel.sourceLicenseValue}"/>
            <bean ref="analysisModel" method="setInitialSavingsEstimationReportModel(${body})" />
            <setBody>
                <simple>${ref:analysisModel}</simple>
            </setBody>
            <log message="######## AnalysisModel ${body}" />
            <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <to uri="jpa:org.jboss.xavier.analytics.pojo.output.AnalysisModel" />
        </route>

        <!--
            The following route is used as sub-route to send generic commands to the kie server.
        -->
        <route id="decision-server-rest" trace="true">
            <!-- Using the xstream marshalling -->
            <from id="route-from-decision-server-rest" uri="direct:decisionserver"/>
            <setHeader headerName="CamelHttpMethod" id="header-post">
                <constant>POST</constant>
            </setHeader>
            <!-- Using the xstream marshalling -->
            <setHeader headerName="Content-Type" id="route-header-content-type">
                <constant>application/xml</constant>
            </setHeader>
            <setHeader headerName="X-KIE-ContentType" id="route-header-kie-content-type">
                <constant>xstream</constant>
            </setHeader>
            <marshal id="route-marshal">
                <xstream/>
            </marshal>
            <to id="log-request" uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <to id="route-to-decision-server-rest" uri="http://{{service:{{kieserver.service}}:{{kieserver.devel-service}}}}/{{kieserver.path}}?authMethod=Basic&amp;authUsername={{kieserver.username}}&amp;authPassword={{kieserver.password}}"/>
            <!-- Unmarshal the response -->
            <unmarshal id="route-unmarshal">
                <xstream/>
            </unmarshal>
        </route>

    </camelContext>
</beans>
