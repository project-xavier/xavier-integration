<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/data/jpa
                        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                        http://camel.apache.org/schema/spring
                        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jpa:repositories base-package="org.jboss.xavier.integrations.jpa" />

    <!-- setup ActiveMQ Artemis connection factory -->
    <bean id="artemisConnectionFactory" class="org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory">
        <constructor-arg index="0" value="tcp://${amq.server}:${amq.port:61616}"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <!-- specify connection factory on JMS component -->
        <property name="connectionFactory" ref="artemisConnectionFactory"/>
    </bean>

    <bean id="restResponseHeaderRemover" class="org.jboss.xavier.integrations.route.filter.RestHeaderFilterStrategy">
        <property name="outFilterPattern" value=".*" />
        <property name="outAllowFilter">
            <set>
                <value>Content-Disposition</value>
            </set>
        </property>
    </bean>

    <bean id="zipAggregationStrategy" class="org.apache.camel.processor.aggregate.zipfile.ZipAggregationStrategy">
        <constructor-arg index="0" value="false"/>
        <constructor-arg index="1" value="true"/>
    </bean>

    <bean id="dateUtils" class="org.jboss.xavier.utils.DateUtils"/>
    <bean id="utils" class="org.jboss.xavier.utils.Utils"/>

    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

        <onException>
            <exception>java.lang.Exception</exception>
            <handled><constant>true</constant></handled>
            <setHeader headerName="exception">
                <simple>${exception.stacktrace}</simple>
            </setHeader>
            <bean ref="mainRouteBuilder" method="markAnalysisAsFailed(${exchange})"/>
            <stop/>
        </onException>

        <interceptFrom id="interceptor-username" uri="rest:*">
            <to uri="direct:check-authenticated-request" />
            <when>
                <simple>${header.CamelServletContextPath} contains '/administration/'</simple>
                <to uri="direct:check-authorized-request" />
            </when>
        </interceptFrom>

        <restConfiguration apiContextPath="/api-doc" apiContextRouteId="doc-api" component="servlet" bindingMode="json">
            <endpointProperty key="headerFilterStrategy" value="#restResponseHeaderRemover"/>
            <apiProperty key="api.title" value="Migration Analytics REST API"/>
            <apiProperty key="api.version" value="0.1"/>
            <apiProperty key="cors" value="true"/>
        </restConfiguration>

        <rest path="/mappings">
            <description>Mapping REST API</description>
            <get uri="/flag-assessment">
                <route id="mappings-flag-assessment-findAll">
                    <bean ref="flagAssessmentService" method="findAll()" />
                </route>
            </get>
        </rest>

        <rest path="/administration">
            <get uri="/report/csv" produces="application/octet-stream">
                <route id="administration-report-csv">
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.CORRELATION_ID}">
                        <method ref="utils" method="generateUUID"/>
                    </setHeader>
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_DIR}">
                        <constant>tmpFolder</constant>
                    </setHeader>
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_FILE}">
                        <simple>${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.CORRELATION_ID}}</simple>
                    </setHeader>

                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.FROM_DATE}">
                        <method ref="dateUtils" method="getUnixEpochDate"/>
                    </setHeader>
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.TO_DATE}">
                        <simple>${date:now}</simple>
                    </setHeader>
                    <setHeader headerName="Exchange.FILE_NAME">
                        <simple>all.csv</simple>
                    </setHeader>
                    <to uri="direct:administrationReportCsvGenerator"/>

                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.FROM_DATE}">
                        <method ref="dateUtils" method="getLastMondayMinus7days"/>
                    </setHeader>
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.TO_DATE}">
                        <method ref="dateUtils" method="getLastMonday"/>
                    </setHeader>
                    <setHeader headerName="Exchange.FILE_NAME">
                        <simple>${date:header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.FROM_DATE}:yyyyMMddHHmmssz}-to-${date:header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.TO_DATE}:yyyyMMddHHmmssz}.csv</simple>
                    </setHeader>
                    <to uri="direct:administrationReportCsvGenerator"/>

                    <pollEnrich>
                        <simple>file:${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_DIR}}?fileName=${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_FILE}}.zip&amp;delete=true</simple>
                    </pollEnrich>
                    <setHeader headerName="$simple{type:org.jboss.xavier.integrations.route.dataformat.CustomizedMultipartDataFormat.CONTENT_DISPOSITION}">
                        <simple>attachment;filename=${date:now:yyyyMMddHHmmssz}.zip</simple>
                    </setHeader>
                </route>
            </get>
        </rest>

        <rest path="/report">
            <description>Report REST API</description>
            <get uri="/">
                <description>Get the list of all the reports for the user</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" />
                <param name="filterText" type="query" required="false" description="Define the text which will be used to filter the results" />
                <route id="reports-get-all">
                    <choice>
                        <when>
                            <simple>${header.filterText} == null</simple>
                            <bean ref="analysisService" method="findAllByOwner(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.page}, ${header.size})" />
                        </when>
                        <otherwise>
                            <bean ref="analysisService" method="findByOwnerAndReportName(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.filterText}, ${header.page}, ${header.size})" />
                        </otherwise>
                    </choice>
                </route>
            </get>
            <get uri="/{id}">
                <description>Get the details of a report</description>
                <route id="report-get-details">
                    <bean ref="analysisService" method="findByOwnerAndId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})" />
                </route>
            </get>
            <delete uri="/{id}">
                <description>Delete a report</description>
                <route id="report-delete">
                    <bean ref="analysisService" method="findByOwnerAndId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})"/>
                    <choice>
                        <when>
                            <simple>${body} != null</simple>
                            <bean ref="analysisService" method="deleteById(${header.id})" />
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_NO_CONTENT}</simple>
                            </setHeader>
                        </when>
                        <otherwise>
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_NOT_FOUND}</simple>
                            </setHeader>
                            <setBody>
                                <constant>Analysis not found</constant>
                            </setBody>
                        </otherwise>
                    </choice>
                </route>
            </delete>
            <get uri="/{id}/initial-saving-estimation">
                <description>Get the Initial Cost Saving report</description>
                <route id="reports-get-details">
                    <bean ref="initialSavingsEstimationReportService" method="findByAnalysisOwnerAndAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})" />
                </route>
            </get>
            <get uri="/{id}/workload-inventory">
                <description>Get the Workload Inventory Reports</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" dataType="int" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" dataType="int" />
                <param name="orderBy" type="query" defaultValue="id" required="false" description="Define sort field which will be use" />
                <param name="orderAsc" type="query" defaultValue="false" required="false" description="Define if sort is ascending" dataType="boolean" />
                <param name="provider" type="query" required="false" description="Define a filter" />
                <param name="datacenter" type="query" required="false" description="Define a filter" />
                <param name="cluster" type="query" required="false" description="Define a filter" />
                <param name="vmName" type="query" required="false" description="Define a filter" />
                <param name="osName" type="query" required="false" description="Define a filter" />
                <param name="workload" type="query" required="false" description="Define a filter" />
                <param name="complexity" type="query" required="false" description="Define a filter" />
                <param name="recommendedTargetIMS" type="query" required="false" description="Define a filter" />
                <param name="flagIMS" type="query" required="false" description="Define a filter" />
                <route id="workload-inventory-report-get-details">
                    <to uri="direct:to-paginationBean"/>
                    <to uri="direct:to-sortBean"/>
                    <to uri="direct:to-workloadInventoryFilterBean"/>
                    <bean ref="workloadInventoryReportService" method="findByAnalysisOwnerAndAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id}, ${header.pageBean}, ${header.sortBean}, ${header.workloadInventoryFilterBean})" />
                </route>
            </get>
            <get uri="/{id}/workload-inventory/csv" produces="text/csv">
                <description>Get the Workload Inventory Reports in CSV format</description>
                <route id="workload-inventory-report-get-details-as-csv">
                    <bean ref="workloadInventoryReportService" method="findByAnalysisOwnerAndAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})" />
                    <to uri="direct:toWorkloadInventoryReportCsv" />
                    <setHeader headerName="${type:org.jboss.xavier.integrations.route.dataformat.CustomizedMultipartDataFormat.CONTENT_DISPOSITION}">
                        <simple>attachment;filename=workloadInventory_${header.id}.csv</simple>
                    </setHeader>
                </route>
            </get>
            <get uri="/{id}/workload-inventory/available-filters">
                <description>Get available filters</description>
                <route id="workload-inventory-report-available-filters">
                    <!-- if the user is the owner of the analysis then it's fine to get the filters -->
                    <bean ref="analysisService" method="findByOwnerAndId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})"/>
                    <choice>
                        <when>
                            <simple>${body} != null</simple>
                            <bean ref="workloadInventoryReportService" method="findAvailableFiltersByAnalysisId(${header.id})" />
                        </when>
                        <otherwise>
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_FORBIDDEN}</simple>
                            </setHeader>
                            <setBody>
                                <constant>Forbidden</constant>
                            </setBody>
                        </otherwise>
                    </choice>

                </route>
            </get>
            <get uri="/{id}/workload-summary">
                <description>Get the Workload Summary Report</description>
                <route id="workload-summary-report-get">
                    <bean ref="workloadSummaryReportService" method="findByAnalysisOwnerAndAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id})" />
                </route>
            </get>
            <get uri="/{id}/workload-summary/workloads">
                <description>Get the Workloads detected</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" dataType="int" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" dataType="int" />
                <param name="orderBy" type="query" defaultValue="id" required="false" description="Define sort field which will be use" />
                <param name="orderAsc" type="query" defaultValue="false" required="false" description="Define if sort is ascending" dataType="boolean" />
                <route id="workload-summary-workloads-report-get">
                    <to uri="direct:to-paginationBean"/>
                    <to uri="direct:to-sortBean"/>
                    <bean ref="workloadService" method="findByReportAnalysisOwnerAndReportAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id}, ${header.pageBean}, ${header.sortBean})" />
                </route>
            </get>
            <get uri="/{id}/workload-summary/flags">
                <description>Get the Workloads detected</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" dataType="int" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" dataType="int" />
                <param name="orderBy" type="query" defaultValue="id" required="false" description="Define sort field which will be use" />
                <param name="orderAsc" type="query" defaultValue="true" required="false" description="Define if sort is ascending" dataType="boolean" />
                <route id="workload-summary-flags-report-get">
                    <to uri="direct:to-paginationBean"/>
                    <to uri="direct:to-sortBean"/>
                    <bean ref="flagService" method="findByReportAnalysisOwnerAndReportAnalysisId(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}}, ${header.id}, ${header.pageBean}, ${header.sortBean})" />
                </route>
            </get>
            <get uri="/{id}/payload">
                <route id="report-payload-download">
                    <bean ref="analysisService" method="findByOwnerAndId(${header.${type:org.jboss.xavier.integrations.route.MainRouteBuilder.USERNAME}}, ${header.id})"/>
                    <choice>
                        <when>
                            <simple>${body} != null &amp;&amp; ${body.payloadStorageId} != null</simple>
                            <pollEnrich id="pollEnrich">
                                <simple>aws-s3:xavier-dev?region={{S3_REGION}}&amp;accessKey={{S3_ACCESS_KEY_ID}}&amp;secretKey=RAW({{S3_SECRET_ACCESS_KEY}})&amp;deleteAfterRead=false&amp;fileName=${body.payloadStorageId}</simple>
                            </pollEnrich>
                            <setHeader headerName="${type:org.jboss.xavier.integrations.route.dataformat.CustomizedMultipartDataFormat.CONTENT_DISPOSITION}">
                                <simple>${header.CamelAwsS3ContentDisposition}</simple>
                            </setHeader>
                            <setHeader headerName="Exchange.CONTENT_TYPE">
                                <simple>${header.CamelAwsS3ContentType}</simple>
                            </setHeader>
                            <convertBodyTo type="byte[]"/>
                        </when>
                        <otherwise>
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_NOT_FOUND}</simple>
                            </setHeader>
                            <setBody>
                                <constant>Not Found</constant>
                            </setBody>
                        </otherwise>
                    </choice>
                </route>
            </get>
        </rest>

        <rest path="/user">
            <description>User REST API</description>
            <get uri="/" outType="org.jboss.xavier.integrations.route.model.user.User">
                <description>Get session user info</description>
                <route id="get-user-info">
                    <bean ref="userService" method="findUser(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.USERNAME}})" />
                </route>
            </get>
        </rest>

        <route id="workload-inventory-report-model-to-csv">
            <from uri="direct:toWorkloadInventoryReportCsv" />
            <marshal>
                <bindy id="workloadInventoryReportModelBindyDataformat" type="Csv" classType="org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel"/>
            </marshal>
        </route>

        <route id="administration-report-csv-generator">
            <from uri="direct:administrationReportCsvGenerator"/>
            <log message="Creating csv file using fromDate: ${date:header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.FROM_DATE}}, toDate ${date:header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.TO_DATE}}" />
            <bean ref="analysisService" method="getAdministrationMetrics(${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.FROM_DATE}}, ${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.TO_DATE}})"/>
            <bean ref="administrationMetricsMapper" method="toAdministrationMetricsModels"/>
            <to uri="direct:administrationMetricsModelToCsv"/>
            <to uri="direct:administration-report-csv-aggregator" />
        </route>

        <route id="administration-metrics-model-to-csv">
            <from uri="direct:administrationMetricsModelToCsv" />
            <marshal>
                <bindy id="administrationMetricsModelBindyDataformat" type="Csv" classType="org.jboss.xavier.analytics.pojo.AdministrationMetricsModel"/>
            </marshal>
        </route>

        <route id="administration-report-csv-aggregator">
            <from uri="direct:administration-report-csv-aggregator"/>
            <aggregate strategyRef="zipAggregationStrategy" completionSize="2">
                <correlationExpression>
                    <header>${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.CORRELATION_ID}</header>
                </correlationExpression>
                <setHeader headerName="Exchange.FILE_NAME">
                    <simple>${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_FILE}}.zip</simple>
                </setHeader>
                <toD uri="file:${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.WORKING_DIR}}"/>
            </aggregate>
        </route>

        <route id="call-kie-extract-reports" trace="true">
            <from uri="jms:queue:inputDataModel" />
            <log message="Message received" />
            <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
            <to id="decisionserver" uri="direct:decisionserver"/>
            <bean id="route-extract-reports" method="extractReports" ref="decisionServerHelper"/>
            <log id="route-log-totalPrice" message="totalPrice = ${body.totalPrice}"/>
            <to uri="jpa:org.jboss.xavier.integrations.migrationanalytics.output.ReportDataModel" />
        </route>

        <route id="route-ma">
            <from uri="jms:queue:uploadFormInputDataModel" />
                <log message="Message received" />
                <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
                <setHeader headerName="${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.ANALYSIS_ID}">
                    <simple>${body.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.ANALYSIS_ID}}</simple>
                </setHeader>
                <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
                <to uri="direct:decisionserver" id="route-ma-decisionserver"/>
                <bean id="route-extract-ics-reports" method="extractInitialSavingsEstimationReportModel" ref="decisionServerHelper"/>
                <log id="route-log-sourceLicenseValue" message="totalPrice = ${body.sourceCostsModel.sourceLicenseValue}"/>
                <bean ref="analysisService" method="setInitialSavingsEstimationReportModel(${body}, ${header.${type:org.jboss.xavier.integrations.route.RouteBuilderExceptionHandler.ANALYSIS_ID}})" />
        </route>

        <!--
            The following route is used as sub-route to send generic commands to the kie server.
        -->
        <route id="decision-server-rest" trace="true">
            <!-- Using the xstream marshalling -->
            <from id="route-from-decision-server-rest" uri="direct:decisionserver"/>
            <setHeader headerName="Exchange.HTTP_METHOD" id="header-post">
                <constant>POST</constant>
            </setHeader>
            <!-- Using the xstream marshalling -->
            <setHeader headerName="Exchange.CONTENT_TYPE" id="route-header-content-type">
                <constant>application/xml</constant>
            </setHeader>
            <setHeader headerName="X-KIE-ContentType" id="route-header-kie-content-type">
                <constant>xstream</constant>
            </setHeader>
            <marshal id="route-marshal">
                <xstream/>
            </marshal>
            <log message="Body ${body}; Headers ${headers}" loggingLevel="DEBUG"/>
            <to id="route-to-decision-server-rest" uri="http://{{service:{{kieserver.service}}:{{kieserver.devel-service}}}}/{{kieserver.path}}?authMethod=Basic&amp;authUsername={{kieserver.username}}&amp;authPassword={{kieserver.password}}"/>
            <choice>
                <when>
                    <simple>${header.CamelHttpResponseCode} != 200</simple>
                    <throwException exceptionType="org.apache.commons.httpclient.HttpException" message="Unsuccessful response from KIE Server"/>
                    <stop/>
                </when>
            </choice>
            <!-- Unmarshal the response -->
            <unmarshal id="route-unmarshal">
                <xstream/>
            </unmarshal>
        </route>

    </camelContext>
</beans>
