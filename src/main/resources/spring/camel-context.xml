<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/data/jpa
                        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
                        http://camel.apache.org/schema/spring
                        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jpa:repositories base-package="org.jboss.xavier.integrations.jpa" />

    <!-- setup ActiveMQ Artemis connection factory -->
    <bean id="artemisConnectionFactory" class="org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory">
        <constructor-arg index="0" value="tcp://${amq.server}:${amq.port:61616}"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <!-- specify connection factory on JMS component -->
        <property name="connectionFactory" ref="artemisConnectionFactory"/>
    </bean>

    <bean id="restResponseHeaderRemover" class="org.jboss.xavier.integrations.route.filter.RestHeaderFilterStrategy">
        <property name="outFilterPattern" value=".*" />
        <property name="outAllowFilter">
            <set>
                <value>Content-Disposition</value>
            </set>
        </property>
    </bean>

    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">

        <restConfiguration apiContextPath="/api-doc" apiContextRouteId="doc-api" component="servlet" bindingMode="json">
            <endpointProperty key="headerFilterStrategy" value="#restResponseHeaderRemover"/>
            <apiProperty key="api.title" value="Migration Analytics REST API"/>
            <apiProperty key="api.version" value="0.1"/>
            <apiProperty key="cors" value="true"/>
        </restConfiguration>

        <rest path="/report">
            <description>Report REST API</description>
            <get uri="/">
                <description>Get the list of all the reports</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" />
                <param name="filterText" type="query" required="false" description="Define the text which will be used to filter the results" />
                <route id="reports-get-all">
                    <log message="${headers} ${body}" />
                    <choice>
                        <when>
                            <simple>${header.filterText} == null</simple>
                            <bean ref="analysisService" method="findReports(${header.page}, ${header.size})" />
                        </when>
                        <otherwise>
                            <bean ref="analysisService" method="findReports(${header.filterText}, ${header.page}, ${header.size})" />
                        </otherwise>
                    </choice>
                </route>
            </get>
            <get uri="/{id}">
                <description>Get the details of a report</description>
                <route id="report-get-details">
                    <bean ref="analysisService" method="findById(${header.id})" />
                </route>
            </get>
            <delete uri="/{id}">
                <description>Delete a report</description>
                <route id="report-delete">
                    <bean ref="analysisService" method="findById(${header.id})"/>
                    <choice>
                        <when>
                            <simple>${body} != null</simple>
                            <bean ref="analysisService" method="deleteById(${header.id})" />
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_NO_CONTENT}</simple>
                            </setHeader>
                        </when>
                        <otherwise>
                            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                                <simple resultType="String">${type:javax.servlet.http.HttpServletResponse.SC_NOT_FOUND}</simple>
                            </setHeader>
                            <setBody>
                                <constant>Analysis not found</constant>
                            </setBody>
                        </otherwise>
                    </choice>
                </route>
            </delete>
            <get uri="/{id}/initial-saving-estimation">
                <description>Get the Initial Cost Saving report</description>
                <route id="reports-get-details">
                    <bean ref="initialSavingsEstimationReportService" method="findOneByAnalysisId(${header.id})" />
                </route>
            </get>
            <get uri="/{id}/workload-inventory">
                <description>Get the Workload Inventory Reports</description>
                <param name="page" type="query" defaultValue="0" required="false" description="Define the page requested" dataType="int" />
                <param name="size" type="query" defaultValue="10" required="false" description="Define the size of the requested page" dataType="int" />
                <param name="orderBy" type="query" defaultValue="id" required="false" description="Define sort field which will be use" />
                <param name="orderAsc" type="query" defaultValue="false" required="false" description="Define if sort is ascending" dataType="boolean" />
                <route id="workload-inventory-report-get-details">
                    <to uri="direct:to-paginationBean"/>
                    <to uri="direct:to-sortBean"/>
                    <bean ref="workloadInventoryReportService" method="findByAnalysisId(${header.id}, ${header.pageBean}, ${header.sortBean})" />
                </route>
            </get>
            <get uri="/{id}/workload-inventory/csv" produces="text/csv">
                <description>Get the Workload Inventory Reports in CSV format</description>
                <route id="workload-inventory-report-get-details-as-csv">
                    <bean ref="workloadInventoryReportService" method="findByAnalysisId(${header.id})" />
                    <to uri="direct:toWorkloadInventoryReportCsv" />
                    <setHeader headerName="Content-Disposition">
                        <simple>attachment;filename=workloadInventory_${header.id}.csv</simple>
                    </setHeader>
                </route>
            </get>
            <get uri="/{id}/workload-summary">
                <description>Get the Workload Summary Report</description>
                <route id="workload-summary-report-get">
                    <bean ref="workloadSummaryReportService" method="findByAnalysisId(${header.id})" />
                </route>
            </get>
        </rest>

        <rest path="/user">
            <description>User REST API</description>
            <get uri="/" outType="org.jboss.xavier.integrations.route.model.user.User">
                <description>Get session user info</description>
                <route id="get-user-info">
                    <bean ref="userService" method="findUser" />
                </route>
            </get>
        </rest>

        <route id="workload-inventory-report-model-to-csv">
            <from uri="direct:toWorkloadInventoryReportCsv" />
            <marshal>
                <bindy id="workloadInventoryReportModelBindyDataformat" type="Csv" classType="org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel"/>
            </marshal>
        </route>

        <route id="call-kie-extract-reports" trace="true">
            <from uri="jms:queue:inputDataModel" />
            <log message="Message received" />
            <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
            <to id="decisionserver" uri="direct:decisionserver"/>
            <bean id="route-extract-reports" method="extractReports" ref="decisionServerHelper"/>
            <log id="route-log-totalPrice" message="totalPrice = ${body.totalPrice}"/>
            <to uri="jpa:org.jboss.xavier.integrations.migrationanalytics.output.ReportDataModel" />
        </route>

        <route id="route-ma">
            <from uri="jms:queue:uploadFormInputDataModel" />
            <doTry>
                <log message="Message received" />
                <to uri="log:INFO?showBody=true&amp;showHeaders=true" />
                <setHeader headerName="analysisId">
                    <simple>${body.${type:org.jboss.xavier.integrations.route.MainRouteBuilder.ANALYSIS_ID}}</simple>
                </setHeader>
                <bean method="createMigrationAnalyticsCommand(${body})" ref="decisionServerHelper"/>
                <to uri="direct:decisionserver" id="route-ma-decisionserver"/>
                <bean id="route-extract-ics-reports" method="extractInitialSavingsEstimationReportModel" ref="decisionServerHelper"/>
                <log id="route-log-sourceLicenseValue" message="totalPrice = ${body.sourceCostsModel.sourceLicenseValue}"/>
                <bean ref="analysisService" method="setInitialSavingsEstimationReportModel(${body}, ${header.analysisId})" />

                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <bean ref="analysisService" method='updateStatus("FAILED", ${header.analysisId})'/>
                </doCatch>
            </doTry>
        </route>

        <!--
            The following route is used as sub-route to send generic commands to the kie server.
        -->
        <route id="decision-server-rest" trace="true">
            <!-- Using the xstream marshalling -->
            <from id="route-from-decision-server-rest" uri="direct:decisionserver"/>
            <setHeader headerName="CamelHttpMethod" id="header-post">
                <constant>POST</constant>
            </setHeader>
            <!-- Using the xstream marshalling -->
            <setHeader headerName="Content-Type" id="route-header-content-type">
                <constant>application/xml</constant>
            </setHeader>
            <setHeader headerName="X-KIE-ContentType" id="route-header-kie-content-type">
                <constant>xstream</constant>
            </setHeader>
            <marshal id="route-marshal">
                <xstream/>
            </marshal>
            <to id="log-request" uri="log:INFO?showBody=true&amp;showHeaders=true" />
            <to id="route-to-decision-server-rest" uri="http://{{service:{{kieserver.service}}:{{kieserver.devel-service}}}}/{{kieserver.path}}?authMethod=Basic&amp;authUsername={{kieserver.username}}&amp;authPassword={{kieserver.password}}"/>
            <choice>
                <when>
                    <simple>${header.CamelHttpResponseCode} != 200</simple>
                    <throwException exceptionType="org.apache.commons.httpclient.HttpException" message="Unsuccessful response from KIE Server"/>
                    <stop/>
                </when>
            </choice>
            <!-- Unmarshal the response -->
            <unmarshal id="route-unmarshal">
                <xstream/>
            </unmarshal>
        </route>

    </camelContext>
</beans>
